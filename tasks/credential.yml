- name: Check the credential of jenkins user
  shell: "java -jar {{ jenkins_master_cli_path }} -s {{ jenkins_master_url }}/ list-credentials 'SystemCredentialsProvider::SystemContextResolver::jenkins' --username {{ jenkins_master_admin_user }} --password {{ jenkins_master_admin_password }} | grep -E ' {{ jenkins_master_user }}$'"
  register: register_jenkins_master_credential
  failed_when: register_jenkins_master_credential.rc not in [0, 1]
  changed_when: False
  always_run: yes
  no_log: "{% if jenkins_master_debug_log %}no{% else %}yes{% endif %}"

- name: Create credential of jenkins user
  shell: |
    echo '        <com.cloudbees.jenkins.plugins.sshcredentials.impl.BasicSSHUserPrivateKey plugin="ssh-credentials">
          <scope>GLOBAL</scope>
          <id>{{ ansible_date_time.epoch | int | random | to_uuid }}</id>
          <description></description>
          <username>{{ jenkins_master_user }}</username>
          <passphrase>{{ jenkins_master_ssh_passphrase }}</passphrase>
          <privateKeySource class="com.cloudbees.jenkins.plugins.sshcredentials.impl.BasicSSHUserPrivateKey$UsersPrivateKeySource"/>
        </com.cloudbees.jenkins.plugins.sshcredentials.impl.BasicSSHUserPrivateKey>' | java -jar {{ jenkins_master_cli_path }} -s {{ jenkins_master_url }}/ create-credentials-by-xml 'SystemCredentialsProvider::SystemContextResolver::jenkins' "(global)" --username {{ jenkins_master_admin_user }} --password {{ jenkins_master_admin_password }}
  when: register_jenkins_master_credential.rc == 1
  no_log: "{% if jenkins_master_debug_log %}no{% else %}yes{% endif %}"

- name: Restart Jenkins
  service:
    name: "{{ jenkins_master_service }}"
    state: restarted
  when:
    - register_jenkins_master_credential.rc == 1
  register: register_restart_jenkins_after_credential

- name: Wait for Jenkins to start
  shell: "curl -D - --silent --max-time 5 {{ jenkins_master_url }}/cli/"
  register: result
  until: (result.stdout.find("403 Forbidden") != -1) or (result.stdout.find("200 OK") != -1) and (result.stdout.find("Please wait while") == -1)
  retries: "{{ jenkins_master_connection_retries }}"
  delay: "{{ jenkins_master_connection_delay }}"
  changed_when: false
  when:
    - register_restart_jenkins_after_credential is defined
    - register_restart_jenkins_after_credential.changed
  always_run: yes

- name: Update credentail of jenkins user
  shell: |
    echo '        <com.cloudbees.jenkins.plugins.sshcredentials.impl.BasicSSHUserPrivateKey plugin="ssh-credentials">
          <scope>GLOBAL</scope>
          <description></description>
          <username>{{ jenkins_master_user }}</username>
          <passphrase>{{ jenkins_master_ssh_passphrase }}</passphrase>
          <privateKeySource class="com.cloudbees.jenkins.plugins.sshcredentials.impl.BasicSSHUserPrivateKey$UsersPrivateKeySource"/>
        </com.cloudbees.jenkins.plugins.sshcredentials.impl.BasicSSHUserPrivateKey>' | java -jar {{ jenkins_master_cli_path }} -s {{ jenkins_master_url }}/ update-credentials-by-xml 'SystemCredentialsProvider::SystemContextResolver::jenkins' "(global)" {{ register_jenkins_master_credential.stdout.split(' ') | first }} --username {{ jenkins_master_admin_user }} --password {{ jenkins_master_admin_password }}
  when:
    - register_jenkins_master_ssh_private_key.changed
    - register_jenkins_master_credential.rc == 0
  no_log: "{% if jenkins_master_debug_log %}no{% else %}yes{% endif %}"

- name: Restart Jenkins
  service:
    name: "{{ jenkins_master_service }}"
    state: restarted
  when:
    - register_jenkins_master_ssh_private_key.changed
    - register_jenkins_master_credential.rc == 0
  register: register_restart_jenkins_after_update_credential

- name: Wait for Jenkins to start
  shell: "curl -D - --silent --max-time 5 {{ jenkins_master_url }}/cli/"
  register: result
  until: (result.stdout.find("403 Forbidden") != -1) or (result.stdout.find("200 OK") != -1) and (result.stdout.find("Please wait while") == -1)
  retries: "{{ jenkins_master_connection_retries }}"
  delay: "{{ jenkins_master_connection_delay }}"
  changed_when: false
  when:
    - register_restart_jenkins_after_update_credential is defined
    - register_restart_jenkins_after_update_credential.changed
  always_run: yes

- name: Register credential of jenkins user
  shell: "java -jar {{ jenkins_master_cli_path }} -s {{ jenkins_master_url }}/ list-credentials 'SystemCredentialsProvider::SystemContextResolver::jenkins' --username {{ jenkins_master_admin_user }} --password {{ jenkins_master_admin_password }} | grep -E ' {{ jenkins_master_user }}$'"
  register: register_jenkins_master_credential_id
  changed_when: False
  always_run: yes
  no_log: "{% if jenkins_master_debug_log %}no{% else %}yes{% endif %}"
