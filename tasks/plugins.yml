---

- name: Create jenkins_master_updates_dir
  file:
    path: "{{ jenkins_master_updates_dir }}"
    state: directory
    owner: "{{ jenkins_master_user }}"
    group: "{{ jenkins_master_group }}"

- name: Download default.json for plugins
  shell: curl -L https://updates.jenkins-ci.org/update-center.json | sed '1d;$d' > "{{ jenkins_master_updates_dir }}/default.json"
  args:
    creates: "{{ jenkins_master_updates_dir }}/default.json"
  register: register_update_json

- name: Set correct permission for default.json
  file:
    path: "{{ jenkins_master_updates_dir }}/default.json"
    owner: "{{ jenkins_master_user }}"
    group: "{{ jenkins_master_group }}"
    mode: 0644
  when: register_update_json.changed

- name: Check if we're using a password file for authentication
  stat:
    path: "{{ jenkins_master_admin_password_file }}"
  register: register_admin_password_file

- name: Install Jenkins plugins using password.
  command: "java -jar {{ jenkins_master_cli_path }} -s {{ jenkins_master_url }}/ install-plugin {{ item }} --username {{ jenkins_master_admin_user }} --password {{ jenkins_master_admin_password }}"
  args:
    creates: "{{ jenkins_master_home }}/plugins/{{ item }}.jpi"
  with_items: "{{ jenkins_master_plugins }}"
  when: jenkins_master_admin_password != ""
  register: register_install_jenkins_plugins_password
  no_log: "{% if jenkins_master_debug_log %}no{% else %}yes{% endif %}"

- name: Install Jenkins plugins using password-file
  command: "java -jar {{ jenkins_master_cli_path }} -s {{ jenkins_master_url }}/ install-plugin {{ item }} --username {{ jenkins_master_admin_user }} --password-file {{ jenkins_master_admin_password_file }}"
  args:
    creates: "{{ jenkins_master_home }}/plugins/{{ item }}.jpi"
  with_items: "{{ jenkins_master_plugins }}"
  when: register_admin_password_file.stat.exists == True
  register: register_install_jenkins_plugins_password_file

- name: Restart Jenkins
  service:
    name: "{{ jenkins_master_service }}"
    state: restarted
  when:
    - (register_install_jenkins_plugins_password is defined and register_install_jenkins_plugins_password.changed) or (register_install_jenkins_plugins_password_file is defined and register_install_jenkins_plugins_password_file.changed)
  register: register_restart_jenkins_after_plugin

- name: Wait for Jenkins to start
  shell: "curl -D - --silent --max-time 5 {{ jenkins_master_url }}/cli/"
  register: result
  until: (result.stdout.find("403 Forbidden") != -1) or (result.stdout.find("200 OK") != -1) and (result.stdout.find("Please wait while") == -1)
  retries: "{{ jenkins_master_connection_retries }}"
  delay: "{{ jenkins_master_connection_delay }}"
  changed_when: false
  when:
    - register_restart_jenkins_after_plugin is defined
    - register_restart_jenkins_after_plugin.changed
